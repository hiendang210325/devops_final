package main

import (
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"github.com/lib/pq"
	"github.com/rs/cors"
)

type Destination struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Message   string    `json:"message"`
}

var db *sql.DB

func main() {
	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Println("Kh√¥ng t√¨m th·∫•y file .env, s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng h·ªá th·ªëng")
	}

	// L·∫•y URL database t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Println("DATABASE_URL kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p, s·ª≠ d·ª•ng k·∫øt n·ªëi local m·∫∑c ƒë·ªãnh")
		dbURL = "postgres://postgres@localhost:5432/destinations?sslmode=disable"
	}

	// K·∫øt n·ªëi ƒë·∫øn database
	db, err = sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatal("L·ªói k·∫øt n·ªëi database:", err)
	}
	defer db.Close()

	// Test k·∫øt n·ªëi database
	err = db.Ping()
	if err != nil {
		log.Fatal("L·ªói ping database:", err)
	}
	log.Println("K·∫øt n·ªëi database th√†nh c√¥ng")

	// Kh·ªüi t·∫°o database v·ªõi d·ªØ li·ªáu m·∫´u
	initDatabase()

	// T·∫°o router
	r := mux.NewRouter()

	// API routes
	api := r.PathPrefix("/api").Subrouter()
	api.HandleFunc("/destinations", getDestinations).Methods("GET")
	api.HandleFunc("/destinations", createDestination).Methods("POST")
	api.HandleFunc("/health", healthCheck).Methods("GET")

	// C·∫•u h√¨nh CORS
	c := cors.New(cors.Options{
		AllowedOrigins: []string{"*"},
		AllowedMethods: []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders: []string{"*"},
	})

	// √Åp d·ª•ng middleware CORS
	handler := c.Handler(r)

	// L·∫•y port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("üè¥‚Äç‚ò†Ô∏è Travel Backend Server ƒëang kh·ªüi ƒë·ªông tr√™n port %s", port)
	log.Fatal(http.ListenAndServe(":"+port, handler))
}

func initDatabase() {
	// T·∫°o b·∫£ng destinations n·∫øu ch∆∞a t·ªìn t·∫°i
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS destinations (
		id SERIAL PRIMARY KEY,
		name VARCHAR(100) NOT NULL,
		description TEXT NOT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);`

	_, err := db.Exec(createTableSQL)
	if err != nil {
		log.Printf("L·ªói t·∫°o b·∫£ng: %v", err)
		return
	}

	// Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
	var count int
	err = db.QueryRow("SELECT COUNT(*) FROM destinations").Scan(&count)
	if err != nil {
		log.Printf("L·ªói ki·ªÉm tra s·ªë l∆∞·ª£ng destinations: %v", err)
		return
	}

	// Ch√®n d·ªØ li·ªáu m·∫´u n·∫øu b·∫£ng tr·ªëng
	if count == 0 {
		insertSQL := `
		INSERT INTO destinations (name, description) VALUES 
		('H·ªôi An', 'Ancient town with lanterns and heritage.'),
		('H·∫° Long Bay', 'Beautiful bay with limestone islands.'),
		('Sapa', 'Mountainous region with ethnic minorities.'),
		('Mekong Delta', 'River life and floating markets.'),
		('Ph√∫ Qu·ªëc', 'Tropical island paradise.');`

		_, err = db.Exec(insertSQL)
		if err != nil {
			log.Printf("L·ªói ch√®n d·ªØ li·ªáu m·∫´u: %v", err)
		} else {
			log.Println("D·ªØ li·ªáu destinations m·∫´u ƒë√£ ƒë∆∞·ª£c ch√®n th√†nh c√¥ng")
		}
	}
}

func getDestinations(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT id, name, description FROM destinations ORDER BY id")
	if err != nil {
		log.Printf("L·ªói truy v·∫•n destinations: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var destinations []Destination
	for rows.Next() {
		var d Destination
		err := rows.Scan(&d.ID, &d.Name, &d.Description)
		if err != nil {
			log.Printf("L·ªói scan destination: %v", err)
			continue
		}
		destinations = append(destinations, d)
	}

	if err = rows.Err(); err != nil {
		log.Printf("L·ªói l·∫∑p destinations: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(destinations)
}

func createDestination(w http.ResponseWriter, r *http.Request) {
	var destination Destination
	err := json.NewDecoder(r.Body).Decode(&destination)
	if err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	if destination.Name == "" || destination.Description == "" {
		http.Error(w, "Name and description are required", http.StatusBadRequest)
		return
	}

	var id int
	err = db.QueryRow("INSERT INTO destinations (name, description) VALUES ($1, $2) RETURNING id",
		destination.Name, destination.Description).Scan(&id)
	if err != nil {
		if pqErr, ok := err.(*pq.Error); ok {
			log.Printf("L·ªói database: %v", pqErr)
		}
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	destination.ID = id

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(destination)
}

func healthCheck(w http.ResponseWriter, r *http.Request) {
	// Ki·ªÉm tra k·∫øt n·ªëi database
	err := db.Ping()
	status := "healthy"
	message := "üè¥‚Äç‚ò†Ô∏è Travel Backend ƒëang ch·∫°y m∆∞·ª£t m√†, thuy·ªÅn tr∆∞·ªüng!"

	if err != nil {
		status = "unhealthy"
		message = "‚ò†Ô∏è K·∫øt n·ªëi database th·∫•t b·∫°i!"
		log.Printf("Health check th·∫•t b·∫°i: %v", err)
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Message:   message,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// Trigger backend workflow 
